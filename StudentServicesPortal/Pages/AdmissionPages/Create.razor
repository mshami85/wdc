@inject IHttpCaller Caller


<div class="row row-cols mb-5">
    <EditForm Model="_model" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label>
            الاسم
            <InputText @bind-Value="_model!.Name" id="name" class="form-control"></InputText>
        </label>
        <label>
            الأب
            <InputText @bind-Value="_model!.Father" id="father" class="form-control"></InputText>
        </label>
        <label>
            الأم
            <InputText @bind-Value="_model!.Mother" id="mother" class="form-control"></InputText>
        </label>
        <label>
            الرقم الوطني
            <InputText @bind-Value="_model!.NationalNumber" id="nationalnumber" class="form-control"></InputText>
        </label>
        <label>
            ملفات أخرى
            <InputFile id="file" multiple class="form-control" OnChange="OnInputFileChange" accept=".jpg,.bmp,.png,.doc,.docx,.pdf"></InputFile>
        </label>
        <label>
            <button class="btn btn-primary" type="submit">حفظ</button>
        </label>

    </EditForm>
</div>


@code {
    [Parameter]
    public EventCallback<object> OnPosted { get; set; }

    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; }

    EditContext? context;
    AdmissionModel? _model;
    Dictionary<string, byte[]>? files;
    IReadOnlyList<IBrowserFile>? selectedFiles;

    protected override void OnInitialized()
    {
        _model = new();
        files = new Dictionary<string, byte[]>();
        context = new(_model);
    }


    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
    }

    private async void OnSubmit(EditContext ec)
    {
        if (selectedFiles != null && selectedFiles.Count > 0)
        {
            foreach (var file in selectedFiles)
            {
                using (Stream stream = file.OpenReadStream(512000000))
                {
                    using (MemoryStream ms = new MemoryStream())
                    {
                        await stream.CopyToAsync(ms);
                        var fileBytes = ms.ToArray();
                        var fileName = file.Name;
                        files?.Add(fileName, fileBytes);
                    }
                }
            }
        }

        try
        {
            await Caller.PostForm("AdmissionService/Create", _model, files);
            await OnPosted.InvokeAsync(true);
            this.StateHasChanged();
            _model = new();
        }
        catch (Exception ex)
        {
            ErrorComponent.ShowError(ex.Source, ex.Message);
        }
    }


}
