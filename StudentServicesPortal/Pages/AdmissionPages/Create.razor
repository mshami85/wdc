@inject IHttpCaller Caller


<div class="row">
    <div class="col"></div>

    <EditForm Model="_model" OnSubmit="OnSubmit">
        <InputText @bind-Value="_model!.Name" id="name" class="form-control"></InputText>
        <InputText @bind-Value="_model!.Father" id="father" class="form-control"></InputText>
        <InputText @bind-Value="_model!.Mother" id="mother" class="form-control"></InputText>
        <InputText @bind-Value="_model!.NationalNumber" id="nationalnumber" class="form-control"></InputText>
        <InputFile id="file" multiple class="form-control" OnChange="OnInputFileChange"></InputFile>

        <button type="submit">Submit</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public EventCallback<object> OnPosted { get; set; }

    EditContext? context;
    AdmissionModel? _model;
    Dictionary<string, byte[]> files;

    protected override void OnInitialized()
    {
        _model = new();
        files = new Dictionary<string, byte[]>();
        context = new(_model);
    }

    IReadOnlyList<IBrowserFile> selectedFiles;

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
    }

    private async void OnSubmit()
    {
        foreach (var file in selectedFiles)
        {
            using (Stream stream = file.OpenReadStream())
            {
                using (MemoryStream ms = new MemoryStream())
                {
                    await stream.CopyToAsync(ms);
                    var fileBytes = ms.ToArray();
                    var fileName = file.Name;
                    files.Add(fileName, fileBytes);
                }
            }
        }

        await Caller.PostForm("AdmissionService/Create", _model, files);
        await OnPosted.InvokeAsync(true);
        this.StateHasChanged();
    }


}
